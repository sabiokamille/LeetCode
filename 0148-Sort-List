/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return head;
        }

        ListNode* walker = head;
        ListNode* runner = head->next;

        while(runner != nullptr && runner->next != nullptr) {
            walker = walker->next;
            runner = runner->next->next;
        }
        
        //cout << "walker value: " << walker->next->val << ", runner val: " << runner->val << endl;
        ListNode* List2 = sortList(walker->next);
        walker->next = nullptr;
        ListNode* List1 = sortList(head);
        //cout << "head val: " << head->val << ", walker val: " << walker->val << endl;

        return mergeList(List1, List2);
    }

    ListNode* mergeList(ListNode* l1, ListNode* l2) {
        if (l2 == nullptr) {
            return l1;
        } else if (l1 == nullptr) {
            return l2;
        }
        if (l1->val <= l2->val) {
            l1->next = mergeList(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeList(l1, l2->next);
            return l2;
        }
    }
};
